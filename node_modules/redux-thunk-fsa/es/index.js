var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import { isFSA } from 'flux-standard-action';

function isFunction(fn) {
  return typeof fn === 'function';
}

function createThunkMiddleware() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  return function (_ref) {
    var dispatch = _ref.dispatch;
    var getState = _ref.getState;
    return function (next) {
      return function processAction(action) {
        if (isFunction(action)) {
          var nextStep = action(dispatch, getState, opts.extraArgument);
          return opts.next ? processAction(nextStep) : nextStep;
        }

        if (isFSA(action) && isFunction(action.payload)) {
          var _nextStep = action.payload(dispatch, getState, opts.extraArgument);
          if (_nextStep === null && opts.interrupt) {
            return _nextStep;
          }

          return next(_extends({}, action, { payload: _nextStep }));
        }

        // do not pass on empty action
        if (opts.interrupt && (action === null || action === undefined)) {
          return action;
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;
thunk.withOpts = createThunkMiddleware;

export default thunk;